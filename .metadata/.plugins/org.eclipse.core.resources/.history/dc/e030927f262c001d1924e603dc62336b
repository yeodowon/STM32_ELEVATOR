/*
 * UART0.c
 *
 * Created: 2022-08-09 오전 10:44:49
 *  Author: kccistc
 */ 

#include "main.h"
#include "UART0.h"
#include "STEPMOTOR.h"

#define  COMMAND_MAX  50    // 최대로 저장할 수 있는 command수
#define  COMMAND_LENGTH 30	// 1 line에 최대로 save 할 수 있는 data 수

volatile int input_pointer = 0;				// ISR(UART0_RX_vect)에서 save하는 index값
volatile int output_pointer = 0;			// pc_command_processing 에서 가져가는 index값
volatile unsigned char rx_buff[COMMAND_MAX][COMMAND_LENGTH];	// 문자열을 저장하는 buffer
volatile uint8_t rx_data;   // 1. PC로 부터 1byte의 INT가 들어오면 저장 하는 변수
volatile int rx_index = 0;					// 문장의 끝을 판단하는 변수

int is_empty();
int is_full();
int digit_check(char *d, int len);

extern void set_rtc_data_time(char *data_time);
extern UART_HandleTypeDef huart2;	// PC struct
extern UART_HandleTypeDef huart1;	// BT struct
extern int dht11time;

// UART로 부터 1byte가 수신되면 H/W가 call을 해 준다.
// UART1 / UART2번으로 부터 1 byte가 수신(stop bit) 하면 rx interrupt가 발생
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{	
	if (huart == &huart2)   // PC
	{
		if(is_full())
		{
			//printf("Queue is Full");
		}
		else
		{
			unsigned char data;

			data = rx_data;

			if(data == '\n' || data == '\r')						// 문장의 끝을 만났을 때
			{
				rx_buff[input_pointer][rx_index] = '\0';					// 문장의 끝일 때는 NULL을 집어넣는다.
				rx_index = 0;												// 개선점 : circular queue(환영큐)로 개선을 해야 한다.
				//printf("input_pointer = %d\n", input_pointer);
				input_pointer++;
				input_pointer %= COMMAND_MAX;
			}
			else											    // 문장이 끝나지 않았을 때
			{
				rx_buff[input_pointer][rx_index] = data;
				rx_index++;
			}
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
	}

	if (huart == &huart1)   // bluetooth
	{
		if(is_full())
		{
			//printf("Queue is Full");
		}
		else
		{
			unsigned char data;

			data = rx_data;

			if(data == '\n' || data == '\r')						// 문장의 끝을 만났을 때
			{
				rx_buff[input_pointer][rx_index] = '\0';					// 문장의 끝일 때는 NULL을 집어넣는다.
				rx_index = 0;												// 개선점 : circular queue(환영큐)로 개선을 해야 한다.
				//printf("input_pointer = %d\n", input_pointer);
				input_pointer++;
				input_pointer %= COMMAND_MAX;
			}
			else											    // 문장이 끝나지 않았을 때
			{
				rx_buff[input_pointer][rx_index] = data;
				rx_index++;
			}
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해주야 다음 INT가 발생
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
	}
}

int is_empty()		// 큐의 공백 상태를 알려주는 함수
{
	if (input_pointer == output_pointer)
		return 1;
	else
		return 0;
}

int is_full()		// 큐의 포화 상태를 알려주는 함수
{
	int temp;

	temp = (input_pointer + 1) % COMMAND_MAX;
	if (temp == output_pointer)
		return 1;
	else
		return 0;
}

int print_on = 1;

// 이름을 pc_command_processing -> command_processing 으로 변경해야함
void pc_command_processing()
{
	if (is_empty())
	{
		// printf("Queue is Empty");
	}
	else
	{
		if (print_on)
		{
//			printf("output_pointer = %d\n", output_pointer);
//			printf("%s\n", rx_buff[output_pointer]);
		}

		if(strncmp((const char *)rx_buff[output_pointer], "1_floor_up", strlen("1_floor_up")) == 0)
		{
			EXT_state = EXT_active;
			ext_floor = FLOOR1;
			HAL_GPIO_WritePin(EXT_LED_GPIO_Port, EXT_LED_Pin, GPIO_PIN_SET);
			if(floor_count < STEPS_PER_REV * ext_floor)
				motor_ext_state = FORWARD;
			else if(floor_count > STEPS_PER_REV * ext_floor)
				motor_ext_state = BACKWARD;
		}
		else if(strncmp((const char *)rx_buff[output_pointer], "open_door", strlen("open_door")) == 0)
		{
			DOOR_state = DOOR_OPEN;
			// DOOR_OPEN 버튼을 누를 때마다 문이 3초 열리는 것을 갱신한다.
			TIM11_10ms_door_counter = 0;
		}
		else if(strncmp((const char *)rx_buff[output_pointer], "close_door", strlen("close_door")) == 0)
		{
			DOOR_state = DOOR_CLOSE;
		}
		// setrtc220830111500
		else if(strncmp((const char *)rx_buff[output_pointer], "setrtc", strlen("setrtc")) == 0)
		{
			 // Filter가 필요함
			printf("Update Clock!!!\n");
			set_rtc_data_time(&rx_buff[output_pointer][6]);		//220830111500이 들어있는 주소값을 넘겨 set_rtc_data_time 함수를 call
		}
		output_pointer = (output_pointer + 1) % COMMAND_MAX;
	}
}

// true : 1
// false : 0
int digit_check(char *d, int len)
{
	for(int i=0; i<len; i++)
	{
		if(d[i] >= '0' && d[i] <= '9')
			;
		else
			return 0;		// false
	}
	return 1;				// true
}
